#Section 1 - Introduction to DPLYR
#DPLYR: Package for accessing data information (summary statistics, group differences, etc.)
  #Introduces a grammar of data manipulation
  #5 Functions
  #Fast - internal structure written in C++ -> Speed of C + Ease of R
#Important Terms: tbl (structure); %>% (piping operator)

#Section 2 - tbl, a special type of data.frame
#provides a new data structure for R
#can turns dataframes into tbls with tbl_df()
  #Doing so cuts out superfluous rows and columns
  #Also tells you dimensions of full dataset
#To see complete displays of tbl data, use glimpse()
  #Shows data types and initial values of each variable in dataset
  
#Section 3 - The five verbs and select in more detail
  #5 Functions (verbs) that do the basic tasks of data manipulation
    #select(), which returns a subset of the columns,
    #filter(), that is able to return a subset of the rows,
    #arrange(), that reorders the rows according to single or multiple variables,
    #mutate(), used to add columns from existing data,
    #summarise(), which reduces each group to a single row by calculating aggregate measures.
  #Can combine to manipulate data in advanced methods
  #Useful when data is tidy: columns = variables, rows = observations
    #Variables - Select / Mutate
    #Observations - Filter / Arrange
    #Groups - Summarise
  #select
    #select(tbl, columns to select)
      #Separate columns to select with comma
      #select(df, Group, Sum)
  #select helper functions
    #starts_with("X"): every name that starts with "X",
    #ends_with("X"): every name that ends with "X",
    #contains("X"): every name that contains "X",
    #matches("X"): every name that matches "X", where "X" can be a regular expression,
    #num_range("x", 1:5): the variables named x01, x02, x03, x04 and x05,
    #one_of(x): every name that appears in x, which should be a character vector.
  
#Section 4 - The second of five verbs: mutate
  #Adds new variables to a dataset, assembled from existing data in dataset
  #mutate(tbl, new column name = expression)
    #mutate(df, Sum = 'dose 1' + 'dose 2')
#Section 5 - The third of five verbs: filter
  #Returns of a new version of the dataset that only includes certain rows
  #filter(tbl, logical text)
    #Filter returns all the rows the return TRUE to that logical test
      #filter(f1, Cancelled == 1)
  #Requires knowledge of all logical operators; use ?comparison to find all
    #x < y, TRUE if x is less than y
    #x <= y, TRUE if x is less than or equal to y
    #x == y, TRUE if x equals y
    #x != y, TRUE if x does not equal y
    #x >= y, TRUE if x is greater than or equal to y
    #x > y, TRUE if x is greater than y
    #x %in% c(a, b, c), TRUE if x is in the vector c(a, b, c)
#Section 6 - Almost there: the arrange verb
  #Reorders rows of dataset based on content
  #arrange(tbl, column name)
    #arrange(hflights, DepDelay)
    #arrange allow reorders smallest to largest, alphabetical order
    #Add additional tiebreakers with comma
    #desc() arranges in descending order (largest to smallest)
      #wrap around specific column name
#Section 7 - Last but not least: summarise
  #Uses data to create a new dataset of summary statistics to describe data
    #You can decide which statistics to include in dataset
    #summarise(tbl, new column name = expression)
      #summarise, df, sum = sum(A),
                      avg = mean(B),
                      var = var(B))
  #aggregate functions: takes a vector of values as input and returns a single output
    #R Base package: min, mean, sum, var, sd, length, IQR, max, median
    #dplyr: first, last, nth, n, n_distinct
#Section 8 - Chaining your functions: the pipe operator
  #Creating objects for individual functions can take up too much space in memory
  #Can avoid passing objects between functions by piping
  #Pipe %>% - from magrittr package - an operator placed between object and function
  #[Some object] [pipe] [some function][arguments]
  #object %>% function(____, arg2, arg3,...)
    #Pipe takes object on left and passes it to function on right as first argument in function
    #think of pipe as the word "then" in a sentence
#Section 9 - Group insights with group_by    
  #In a summarise call, values of the new row summarise entire dataset
  #Good to make observations of groups of rows in dataset
  #group_by(tbl, column to group by)
  #group_by(df, Group)
  #by itself, group_by just gives new table grouped together (arranged by group)
  #when combined with summarise, dplyr calculates new summary for each group
    #Can also combine group_by with mutate to form within group rankings  
  #Combine group_by with mutate
  #When you mutate grouped data, mutate calculates new variables indep't for each group
  #Useful for when mutate uses rank function to calculate within group ranks
  #rank() takes a group of values and calculates the rank of each value with the group
    #call: rank(c(21,22,24,23))
    #output: [1] 1 2 4 3
#Section 10 - dplyr and databases
  #dplyr's designed to work with any tabular data
    #data frame, data table, database
    #can use same 5 verbs to manipulate any of these structures
  #Can even create tbl version via tbl_dt for data table & tbl for database
  #Can store large datasets outside of R in database and then use dplyr to manipulate data
    #& retrieve results
