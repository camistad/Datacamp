#String Manipulation with stringr
#Strings: Elements of character vectors
#stringr is a package for manipulation strings
  #better than base because consistent syntax, simplified options, sensible defaults
#requires use of regular expressions: a language for describing patterns in text
  #e.g. Starts with C or a dollar sign followed by 2 or more digits
#rebus package
  #Find and replace parts of strings
  #Read in text 
#Entering strings
  #\ is used as an escape clause, tells R to treat certain keyboard entries as their
  #actual text, rather than a special character
  #e.g. can use backslash to escape a double quote in character elements
#When to use " vs. ' for wrapping text
  #No quotes in the string, use double quotes
    #e.g. "hi!"
  #Double quotes in the string, use single quotes
    #e.g. 'I said "hi!"'
  #Double and single quotes in the string, use double quotes + \ escape clause
    #e.g. "I'd say \"hi!\""
#Turning numbers into strings
    #Common use of strings is reporting numerical results
    #Allows ability to automate, update, and use in future
    #Recommends format or formatC
      #Give you control of how a number is represented as a string
  #Fixed and scientific formats
    #Fixed: decimal point between ones and tenths
    #Scientific: decimal point after first digit
      #6371 = 6.371 x 10^3
      #6.371 = 6.371e+3
    #Helps read order of magnitude    
#format and format c
  #Take a vector of numbers as input
  #format: scientific = whether to use fixed (false) or scientific (true) format
  #formatc: format = whether to use fixed("f") or scientific("t")
#Putting strings together
  #paste() - takes strings as input and puts it together
    #sep argument, controls character used to separate arguments
    #paste() gets useful to pass in vectors of strings
      #Every vector passed in gets recycled to length of longest vector
        #once all vectors recycled to same length, strings combined element by element
        #recycling behavior means vector passed in can all be different lengths
  #usually, you use paste with a mix of fixed strings and variables
    #collapse argument further collapses all resulting strings into 1, 
      #with specified character between them
    #Can use paste to annotate numbers, etc.
#Introducing stringr
  #powerful but easy to learn
  #built on stringi
    #distills most common operations of stringi
  #concise and consistent
    #all functions start with str_
    #all functions take a vector of strings as the first argument
  #str_c() - stringr function of paste / paste0: uses empty strings as separator by default
    #also differs from paste in how it handles missing values
       #paste turns missing values into the string "NA"
       #str_c propagates missing values 
       #combining any strings with a missing value will result in another missing value
  #str_length() - takes a vector of strings as input and returns the # of characters in each string
    #similar to nchar()
  #str_sub() - extracts parts of strings based on their location
    #function(string, start = 1L, end = -1L)
    #start and end specify the boundaries of the piece to extract in characters
    #str_sub(x,y,z) start extract of x at y up to z
      #str_sub(x,-y,-z) start extract of x at y character from end up to z character from end
  #str_replace_na() replaces missing values with any string you choose
#Hunting for a match
  #most powerful tools = strings + pattern
    #finding strings that contain a pattern, splitting strings, replacing parts of string 
    #that match a pattern
  #stringr function that look for matches
    #all take a pattern argument
      #str_detect() - takes a vector of strings + pattern, returns logical vector thats
        #true for each string that contains a pattern and false otherwise
        #answer's question: does the string contain the pattern?
         #str_detect(x, pattern = "word")
          #pattern can be a regex (e.g. starts with "y")
          #can wrap a pattern in fixed() - useful when there's dots, dashes, brackets etc.
      #str_subset() - like detect, returns only those strings that contain pattern
        #str_extract() - returns vector of same length as input
          #But with only the parts of the strings that matched the pattern
      #str_count() - returns number of times pattern occurred in each string
        #Answers "How many times does the pattern occur in each string"
#str_split: useful for splitting string into 2 characters 
  #output is list with vector of strings, 1 element for each part that was split
  #will split into how many pieces as possible, based on how many times pattern occurs
  #n argument will specify how many elements
  #str_split returns a list, since elements can be a different length
    #if specify n, can create matrix by specifying argument: simplify = TRUE
    #can combine with lapply to conduct some function on each list
  #str_replace() replaces a pattern in input strings with specified replacement string
    #str_replace(x, pattern = "y", replacement = "z"
#Regular Expressions
  #Language for describing patterns in strings
  #a regex is just a sequence of characters
    #language assigns special meaning to some characters
    #e.g. ^.[\d]+
      #"the start of the string, followed by any single character, followed by one or more digits
      #carat^, dot., square brackets [], backslash d \d, and plus + all have special meaning
  #regex can be used in any stringr function that has a pattern argument
    #place in double brackets, e.g. pattern = "^.\\d+"
    #because \ has a special meaning in r strings, you have to escape them with another \
  #if use rebus package, regular expression looks different
    #START %R%
      #ANY_CHAR %R%
      #one_or_more(DGT)
      #where %R% is rebus' way to combine parts in a regex, similar to "then" statement
    #rebus takes care of any escaping
    #rebus can wildcard match a single character with ANY_CHAR, similar to dot . 
  #str_view: takes a string, add pattern
    #open an html view with any matches to pattern highlighted
  #str_extract(x, pattern) - str_extract() returns just the pattern of the string 
    #that matched the pattern
  #regex review:
    #start of string: regex = ^ rebus = START
    #end of string:   regex = $ rebus = END
    #any single char: regex = . rebus = ANY_CHAR
    #literal dot, carat, dollar: regex = \. \^ \$ rebus = DOT, CARAT, DOLLAR
  #Alternation: looks like logical OR in R
    #dog|cat: match pattern dog or match pattern cat
    #Rebus: use function or; e.g. or("dog", "cat")
  #character classes: similar to ANY_CHAR, instead of matching single characters
    #they match any single character in that set 
      #aka "match one and only one of the following characters"
    #char_class("Aa") will match a lower or upper case A
    #negated_char_class: specify any character string not in set
      #essentially the opposite
  #repetition: specify pattern that repeats
    #optional         regex: ?      rebus: optional()
    #Zero + times     regex: *      rebus: zero_or_more()
    #1+ times         regex: +      rebus: one_or_more()
    #B/w n & m times  regex: {n}{m} rebus: repeated()
#Shortcuts
  #regex provides some shortcuts for specifying things
  #e.g. specify range with - such as char_class("0-9") or char_class("a-z")
  #DGT in rebus or \d in regex is equivalent to char_class("0-9")
  #WRD in rebus or \w in regex is equivalent to char_class("a-zA-Z0-9_")
    #aka. any lower or upper case letter, digit, or underscore
  #SPC in rebus or \s is equivalent to a whitespace character (space, tab, newline)
#Capturing
  #a way to group parts of a pattern together
  #in rebus, wrap part of pattern you wish to capture with capture() function
    #rebus: capture(ANY_CHAR) %R% "a"
    #regex: (.)a
  #capturing doesn't change pattern that's matched, just indicates you want to do
    #something with piece of pattern
  #str_match() is designed to work with patterns that include captures
    #str_match() returns matrix where each row corresponds to input string
      #column 1 will be entire match (similar to str_extract)
      #columns 2+ will be for captured groups
    #useful when you want to access different pieces of a pattern
    #e.g. if you use strings to extract cash amounts, can capture dollars or cents
  #?: indicates a non-capturing group - in regex
    #need grouping to distinguish 
      #e.g. difference between (dog|cat) and do(g|c)at
    #rebus has a capture = TRUE argument if you want to capture too
      #e.g. or("dog", "cat", capture = TRUE) == regex's (dog|cat)
        #can also just wrap with capture()
#backreferences
  #referring to a captured part of a pattern
  #uses simple count from left to right
  #Rebus: REF1 == regex \1; REF2 == regex \2 ... REF9 == regex \9
  #can use backreferences in a pattern 
    #SPC %R% 
    #capture(one_or_more(WRD) %R%
    #SPC %R%
    #REF1
    #here REF1 refers to repeating capture(one_or_more(WRD)
  #can also use backreferences in a replacement (e.g. str_replace)
    #replacement = str_c(" ", REF1))
      #can replace a repeated word with a single one
  #to do backreferences you need to 1) capture the part of the pattern to reference
    #2) refer to it with REF# (e.g. REF1)
#Unicode
  #associates each character with a code point
  #e.g. a has code 61; mu has code 3BC
  #can match unicode in regex by specifying codepoint in pattern
    #so to match mu just need to know the codepoint
  #can match categories, scripts, blocks, with \p followed by {name}
  #rebus can look for unicode too
    #can match unicode accents with rebus' pattern = UP_DIACRITIC
      #doing so matches any accent in a text
  #note that sometimes unicodes use two code points
    #ANY_CHAR will only take the first code point
    #when many code points, use GRAPHEME rather than ANY_CHAR
#A case study, reading a play
  #Task: read the play and count the number of lines each character has
  #readlines() - baseline function - reads in text file with no specific structure
    #result is a vector of strings with each element as a line in file
  #useful to know which element has a match
    #done by combining which & str_detect 
  #stri_isempty(): returns a logical you can use to subset non-empty strings
    #empty <- stri_isempty(play_text)
    #play_lines <- play_text[!empty]
  #or1() function from rebus package: specifies alternatives but rather than 
    #each alternative being an argument like in or(), you can pass in a vector
    #of alternatives
#A case study on case
  #regex are case sensitive - e.g. "dog" does not match "Dog"
    #can fix by:
      #1) transforming input strings to a uniform case
        #str_to_lower() function brings all to lower case
        #whole_word() will only match if it occurs as word on its own
        #str_to_upper() function brings all to upper case
      #2) altering match so it's done in case insensitive way
        #regex() function in stringr
          #can wrap pattern in regex() and specify argument: ignore_case = TRUE
        #str_to_title() - transforms every word to title case, so every word
          #starts with a capital letter
        #stri_trans_totitle() - allows specification of type (default = "word")
          #but can also be "sentence" to give sentence case
      
      
    
  
  
